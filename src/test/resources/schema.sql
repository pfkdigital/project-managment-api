-- Drop tables if they exist
DROP TABLE IF EXISTS attachment CASCADE;
DROP TABLE IF EXISTS comment CASCADE;
DROP TABLE IF EXISTS issue CASCADE;
DROP TABLE IF EXISTS notification CASCADE;
DROP TABLE IF EXISTS project CASCADE;
DROP TABLE IF EXISTS project_collaborators CASCADE;
DROP TABLE IF EXISTS task CASCADE;
DROP TABLE IF EXISTS task_user CASCADE;
DROP TABLE IF EXISTS users CASCADE;

-- Create users table
CREATE TABLE users (
                       account_non_expired BOOLEAN NOT NULL,
                       account_non_locked BOOLEAN NOT NULL,
                       credentials_non_expired BOOLEAN NOT NULL,
                       enabled BOOLEAN NOT NULL,
                       id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                       user_id INTEGER UNIQUE,
                       display_image_url VARCHAR(255),
                       email VARCHAR(255) NOT NULL,
                       password VARCHAR(255) NOT NULL,
                       role VARCHAR(255) NOT NULL CHECK (role IN ('ADMIN','USER')),
                       token VARCHAR(255),
                       username VARCHAR(255) NOT NULL
);

-- Create notification table
CREATE TABLE notification (
                              id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                              created_at DATE NOT NULL,
                              is_read BOOLEAN NOT NULL,
                              message VARCHAR(255) NOT NULL,
                              type VARCHAR(255) NOT NULL CHECK (type IN ('DESTRUCTION','CREATION','UPDATE','ASSIGNMENT','COMPLETION'))
);

-- Create project table
CREATE TABLE project (
                         id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                         owner_id INTEGER,
                         description VARCHAR(255) NOT NULL,
                         display_image_url VARCHAR(255) NOT NULL,
                         name VARCHAR(255) NOT NULL,
                         status VARCHAR(255) NOT NULL CHECK (status IN ('ACTIVE','INACTIVE','COMPLETED'))
);

-- Create issue table
CREATE TABLE issue (
                       id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                       assigned_to_id INTEGER,
                       project_id INTEGER,
                       reported_by_id INTEGER,
                       description VARCHAR(255) NOT NULL,
                       priority_status VARCHAR(255) NOT NULL CHECK (priority_status IN ('LOW','MEDIUM','HIGH')),
                       status VARCHAR(255) NOT NULL CHECK (status IN ('OPEN','IN_PROGRESS','RESOLVED','CLOSED')),
                       title VARCHAR(255) NOT NULL
);

-- Create task table
CREATE TABLE task (
                      id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                      created_at DATE NOT NULL,
                      due_date DATE NOT NULL,
                      project_id INTEGER,
                      description VARCHAR(255) NOT NULL,
                      priority VARCHAR(255) NOT NULL CHECK (priority IN ('LOW','MEDIUM','HIGH')),
                      status VARCHAR(255) NOT NULL CHECK (status IN ('OPEN','IN_PROGRESS','COMPLETED'))
);

-- Create comment table
CREATE TABLE comment (
                         id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                         created_at DATE NOT NULL,
                         updated_at DATE,
                         is_edited BOOLEAN NOT NULL,
                         content VARCHAR(255) NOT NULL,
                         user_id INTEGER NOT NULL,
                         issue_id INTEGER,
                         task_id INTEGER
);

-- Create attachment table
CREATE TABLE attachment (
                            id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                            author_id INTEGER NOT NULL,
                            uploaded_at DATE NOT NULL,
                            file_name VARCHAR(255) NOT NULL,
                            file_path VARCHAR(255) NOT NULL,
                            file_type VARCHAR(255) NOT NULL,
                            issue_id INTEGER,
                            task_id INTEGER
);

-- Create project_collaborators table
CREATE TABLE project_collaborators (
                                       collaborator_id INTEGER NOT NULL,
                                       project_id INTEGER NOT NULL
);

-- Create task_user table
CREATE TABLE task_user (
                           task_id INTEGER NOT NULL,
                           user_id INTEGER NOT NULL
);

-- Add foreign keys
ALTER TABLE attachment
    ADD CONSTRAINT fk_attachment_author FOREIGN KEY (author_id) REFERENCES users(id),
    ADD CONSTRAINT fk_attachment_issue FOREIGN KEY (issue_id) REFERENCES issue(id),
    ADD CONSTRAINT fk_attachment_task FOREIGN KEY (task_id) REFERENCES task(id);

ALTER TABLE comment
    ADD CONSTRAINT fk_comment_user FOREIGN KEY (user_id) REFERENCES users,
    ADD CONSTRAINT fk_comment_issue FOREIGN KEY (issue_id) REFERENCES issue,
    ADD CONSTRAINT fk_comment_task FOREIGN KEY (task_id) REFERENCES task;

ALTER TABLE issue
    ADD CONSTRAINT fk_issue_assigned_to FOREIGN KEY (assigned_to_id) REFERENCES users,
    ADD CONSTRAINT fk_issue_project FOREIGN KEY (project_id) REFERENCES project,
    ADD CONSTRAINT fk_issue_reported_by FOREIGN KEY (reported_by_id) REFERENCES users;

ALTER TABLE project
    ADD CONSTRAINT fk_project_owner FOREIGN KEY (owner_id) REFERENCES users;

ALTER TABLE project_collaborators
    ADD CONSTRAINT fk_collaborator FOREIGN KEY (collaborator_id) REFERENCES users,
    ADD CONSTRAINT fk_project FOREIGN KEY (project_id) REFERENCES project;

ALTER TABLE task
    ADD CONSTRAINT fk_task_project FOREIGN KEY (project_id) REFERENCES project;

ALTER TABLE task_user
    ADD CONSTRAINT fk_task_user_task FOREIGN KEY (task_id) REFERENCES task,
    ADD CONSTRAINT fk_task_user_user FOREIGN KEY (user_id) REFERENCES users;

ALTER TABLE users
    ADD CONSTRAINT fk_users_user_id FOREIGN KEY (user_id) REFERENCES users;
